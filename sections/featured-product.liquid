{{ 'featured-product.css' | asset_url | stylesheet_tag }}

<div class="featured-product">
  <div class="featured-product__container page-width">
    {%- assign product = section.settings.product -%}

    {%- if product != blank -%}
      <div class="featured-product__grid">
        <div class="featured-product__media">
          {%- if product.featured_media != blank -%}
            <div class="featured-product__image">
              <img
                srcset="{%- if product.featured_media.width >= 493 -%}{{ product.featured_media | image_url: width: 493 }} 493w,{%- endif -%}
                  {%- if product.featured_media.width >= 600 -%}{{ product.featured_media | image_url: width: 600 }} 600w,{%- endif -%}
                  {%- if product.featured_media.width >= 713 -%}{{ product.featured_media | image_url: width: 713 }} 713w,{%- endif -%}
                  {%- if product.featured_media.width >= 823 -%}{{ product.featured_media | image_url: width: 823 }} 823w,{%- endif -%}
                  {%- if product.featured_media.width >= 990 -%}{{ product.featured_media | image_url: width: 990 }} 990w,{%- endif -%}
                  {%- if product.featured_media.width >= 1100 -%}{{ product.featured_media | image_url: width: 1100 }} 1100w,{%- endif -%}
                  {%- if product.featured_media.width >= 1206 -%}{{ product.featured_media | image_url: width: 1206 }} 1206w,{%- endif -%}
                  {%- if product.featured_media.width >= 1346 -%}{{ product.featured_media | image_url: width: 1346 }} 1346w,{%- endif -%}
                  {%- if product.featured_media.width >= 1426 -%}{{ product.featured_media | image_url: width: 1426 }} 1426w,{%- endif -%}
                  {%- if product.featured_media.width >= 1646 -%}{{ product.featured_media | image_url: width: 1646 }} 1646w,{%- endif -%}
                  {%- if product.featured_media.width >= 1946 -%}{{ product.featured_media | image_url: width: 1946 }} 1946w,{%- endif -%}"
                src="{{ product.featured_media | image_url: width: 1946 }}"
                sizes="(min-width: 1200px) 715px, (min-width: 990px) calc(65.0vw - 10rem), (min-width: 750px) calc((100vw - 11.5rem) / 2), calc(100vw - 4rem)"
                alt="{{ product.featured_media.alt | escape }}"
                loading="lazy"
                width="{{ product.featured_media.width }}"
                height="{{ product.featured_media.height }}">
            </div>
          {%- endif -%}
        </div>

        <div class="featured-product__info">
          {%- if product.title != blank -%}
            <h2 class="featured-product__title">{{ product.title }}</h2>
          {%- endif -%}

          <div class="featured-product__price">
            <div class="price {% if product.compare_at_price > product.price %}price--on-sale{% endif %}" data-price-wrapper>
              <span class="price__regular" data-regular-price>{{ product.price | money }}</span>
              {% if product.compare_at_price > product.price %}
                <s class="price__compare" data-compare-price>{{ product.compare_at_price | money }}</s>
                <span class="price__savings">
                  {%- assign savings = product.compare_at_price | minus: product.price -%}
                  Save
                  <span data-price-savings>{{ savings | money }}</span>
                </span>
              {% endif %}
            </div>
          </div>

          {%- if product.description != blank -%}
            <div class="featured-product__description rte">
              {{ product.description }}
            </div>
          {%- endif -%}

          {%- if product.tags.size > 0 -%}
            <div class="featured-product__tags">
              {%- for tag in product.tags -%}
                <span class="tag">{{ tag }}</span>
              {%- endfor -%}
            </div>
          {%- endif -%}

          <div class="featured-product__form">
            <form
              method="post"
              action="/cart/add"
              class="product-form"
              id="product-form-{{ section.id }}">
              {%- unless product.has_only_default_variant -%}
                <div class="product-variants">
                  {%- for option in product.options_with_values -%}
                    <div class="product-variant__field">
                      <label class="variant-label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
                        {{ option.name }}
                      </label>
                      <select
                        id="Option-{{ section.id }}-{{ forloop.index0 }}"
                        class="variant-select"
                        name="options[{{ option.name | escape }}]"
                        data-option-index="{{ forloop.index0 }}">
                        {%- for value in option.values -%}
                          <option
                            value="{{ value | escape }}"
                            {% if option.selected_value == value %}
                            selected="selected"
                            {% endif %}>
                            {{ value }}
                          </option>
                        {%- endfor -%}
                      </select>
                    </div>
                  {%- endfor -%}
                </div>
              {%- endunless -%}

              <input
                type="hidden"
                name="id"
                value="{{ product.selected_or_first_available_variant.id }}"
                data-product-variants="{{ product.variants | json | escape }}">

              <div class="featured-product__quantity">
                <label for="Quantity">Quantity :</label>
                <input
                  type="number"
                  id="Quantity"
                  name="quantity"
                  value="1"
                  min="1"
                  class="quantity__input">
              </div>

              <button
                type="submit"
                name="add"
                class="featured-product__submit cta-button"
                {% unless product.available %}
                disabled{% endunless %}>
                <span class="button-text">
                  {%- if product.available -%}
                    Add to cart
                  {%- else -%}
                    Sold out
                  {%- endif -%}
                </span>
              </button>
            </form>
          </div>
        </div>
      </div>
    {%- else -%}
      <div class="featured-product__empty">
        <p>No product selected. Please select a product in the theme editor.</p>
      </div>
    {%- endif -%}
  </div>
  <div class="product-accordions">
    {%- for block in section.blocks -%}
      <div class="accordion-item" {{ block.shopify_attributes }}>
        <button class="accordion-trigger" aria-expanded="false">
          <span class="accordion-title">{{ block.settings.title }}</span>
          <span class="accordion-icon">
            <svg
              width="10"
              height="8"
              viewBox="0 0 10 8"
              fill="none"
              xmlns="http://www.w3.org/2000/svg">
              <path d="M9 7.5L5 1.5L1 7.5" stroke="black" />
            </svg>
          </span>
        </button>
        <div class="accordion-content" hidden>
          {{ block.settings.content }}
        </div>
      </div>
    {%- endfor -%}
  </div>
</div>

<script>
  document.querySelectorAll('.accordion-trigger').forEach((button) => {
    button.addEventListener('click', () => {
      const accordionContent = button.nextElementSibling;
      button.setAttribute('aria-expanded', 
        button.getAttribute('aria-expanded') === 'false' ? 'true' : 'false'
      );
      
      if (accordionContent.hasAttribute('hidden')) {
        accordionContent.removeAttribute('hidden');
        accordionContent.style.height = accordionContent.scrollHeight + 'px';
      } else {
        accordionContent.style.height = '0';
        accordionContent.addEventListener('transitionend', () => {
          accordionContent.setAttribute('hidden', '');
        }, { once: true });
      }
    });
  });

  class VariantSelector {
    constructor(section) {
      this.section = section;
      this.form = section.querySelector('.product-form');
      this.variantSelects = this.form?.querySelectorAll('.variant-select');
      this.variantIdInput = this.form?.querySelector('input[name="id"]');
      this.submitButton = this.form?.querySelector('button[type="submit"]');
      this.priceWrapper = section.querySelector('[data-price-wrapper]');
      this.regularPrice = section.querySelector('[data-regular-price]');
      this.comparePrice = section.querySelector('[data-compare-price]');
      this.priceSavings = section.querySelector('[data-price-savings]');
      
      if (!this.form || !this.variantSelects.length) return;
      
      this.variants = JSON.parse(this.variantIdInput.dataset.productVariants || '[]');
      this.setupEventListeners();
    }

    setupEventListeners() {
      this.variantSelects.forEach(select => {
        select.addEventListener('change', this.onVariantChange.bind(this));
      });
    }

    onVariantChange() {
      const selectedOptions = Array.from(this.variantSelects).map(select => select.value);
      const variant = this.variants.find(variant => {
        return variant.options.every((option, index) => option === selectedOptions[index]);
      });

      if (variant) {
        this.variantIdInput.value = variant.id;
        this.updateSubmitButton(variant);
        this.updatePrices(variant);
        this.updateURL(variant);
      }
    }

    formatMoney(cents) {
      return (cents/100).toLocaleString('en-US', {
        style: 'currency',
        currency: 'USD'
      });
    }

    updatePrices(variant) {
      if (!variant) return;

      // Update regular price
      if (this.regularPrice) {
        this.regularPrice.innerHTML = this.formatMoney(variant.price);
      }

      // Handle compare at price and savings
      if (variant.compare_at_price > variant.price) {
        this.priceWrapper.classList.add('price--on-sale');
        
        if (this.comparePrice) {
          this.comparePrice.style.display = '';
          this.comparePrice.innerHTML = this.formatMoney(variant.compare_at_price);
        }
        
        if (this.priceSavings) {
          const savings = variant.compare_at_price - variant.price;
          this.priceSavings.innerHTML = this.formatMoney(savings);
          this.priceSavings.closest('.price__savings').style.display = '';
        }
      } else {
        this.priceWrapper.classList.remove('price--on-sale');
        
        if (this.comparePrice) {
          this.comparePrice.style.display = 'none';
        }
        
        if (this.priceSavings) {
          this.priceSavings.closest('.price__savings').style.display = 'none';
        }
      }
    }

    updateSubmitButton(variant) {
      const buttonText = this.submitButton.querySelector('.button-text');
      if (variant.available) {
        this.submitButton.disabled = false;
        buttonText.textContent = 'Add to cart';
      } else {
        this.submitButton.disabled = true;
        buttonText.textContent = 'Sold out';
      }
    }

    updateURL(variant) {
      if (!variant) return;
      
      const url = new URL(window.location.href);
      url.searchParams.set('variant', variant.id);
      window.history.replaceState({}, '', url.toString());
    }
  }

  // Initialize variant selector
  new VariantSelector(document.getElementById('shopify-section-{{ section.id }}'));

  document.querySelector('#product-form-{{ section.id }}').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const form = this;
    const submitButton = form.querySelector('button[type="submit"]');
    const buttonText = submitButton.querySelector('.button-text');
    const originalText = buttonText.textContent;
    
    // Disable button and show loading state
    submitButton.disabled = true;
    buttonText.textContent = 'Adding...';

    // Prepare the form data
    const formData = {
      items: [{
        id: form.querySelector('[name="id"]').value,
        quantity: parseInt(form.querySelector('[name="quantity"]').value, 10)
      }]
    };

    // Add to cart using Shopify AJAX API
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(() => {
      // Update cart count
      return fetch('/cart.js');
    })
    .then(response => response.json())
    .then(cart => {
      // Update all cart count bubbles in the header
      const cartCountBubbles = document.querySelectorAll('.cart-count-bubble span[aria-hidden="true"]');
      cartCountBubbles.forEach(bubble => {
        bubble.textContent = cart.item_count;
        bubble.closest('.cart-count-bubble').style.display = cart.item_count > 0 ? 'flex' : 'none';
      });

      // Show "Added to Cart" message
      buttonText.textContent = 'Added to Cart';
      submitButton.classList.add('added');

      // Reset button after 2 seconds
      setTimeout(() => {
        submitButton.disabled = false;
        buttonText.textContent = originalText;
        submitButton.classList.remove('added');
      }, 2000);
    })
    .catch(error => {
      console.error('Error:', error);
      // Reset button state on error
      submitButton.disabled = false;
      buttonText.textContent = originalText;
    });
  });
</script>

{% schema %}
  {
    "name": "Featured Product",
    "settings": [
      {
        "type": "product",
        "id": "product",
        "label": "Product"
      },
      {
        "type": "checkbox",
        "id": "show_quantity_selector",
        "label": "Show quantity selector",
        "default": true
      }
    ],
    "blocks": [
      {
        "type": "accordion",
        "name": "Accordion",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Accordion Title"
          },
          {
            "type": "richtext",
            "id": "content",
            "label": "Content",
            "default": "<p>Accordion content goes here.</p>"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Featured Product",
        "category": "Product"
      }
    ]
  }
{% endschema %}